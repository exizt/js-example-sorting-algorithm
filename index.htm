<!doctype html>
<html lang="ko">
<head>
<meta name="viewport" content="user-scalable=yes, initial-scale=1.0, maximum-scale=3.0, minimum-scale=1.0, width=device-width" />
<meta charset="utf-8">
<title>테스트</title>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<script>
//var g_data = [5, 3, 2, 9, 1];
//var g_data = [5, 2, 9, 1];
var g_data = [95, 5, 3, 2, 9, 1, 11, 91, 33, 22];

var g_sort = {
	bubble: { loop_count: 0, swap_count: 0 },
	selection: { loop_count: 0, swap_count: 0 },
	insertion: { loop_count: 0, swap_count: 0 },
	quick: { loop_count: 0, swap_count: 0 }
};

/**
* Bubble Sort 버블 정렬
* 
* O( n(n-1)/2 )
*/
function Bubble_Sort(dataSet,addSwapCount,addLoopCount) {
	const size = dataSet.length;
	for (let i = 0; i < size - 1; i++) {
		for (let j = 0; j < size - i - 1; j++) {
			if (dataSet[j] > dataSet[j + 1]) {
				swap(dataSet, j, j + 1);
				showData(getSwapCount(), dataSet);
			}
			addLoopCount();
		}
	}

	function swap(data, i, j) {
		let temp = data[i];
		data[i] = data[j];
		data[j] = temp;
		//숫자 세려고 추가
		addSwapCount();
	}
	function getSwapCount() {
		return g_sort.bubble.swap_count;
	}
}

/*
* Selection Sort 선택 정렬
* O( n^2 )
*/
function Selection_Sort(dataSet) {
	const size = dataSet.length;
	let min_idx = 0;
	for (let i = 0; i < size; i++) {
		min_idx = i;
		for (let j = i; j < size - 1; j++) {
			if (dataSet[min_idx] > dataSet[j + 1]) {
				min_idx = j + 1;
			}
			addLoopCount();
		}
		if (min_idx != i) {
			swap(dataSet, i, min_idx);
			showData(getSwapCount(), dataSet);
		}
	}
	function swap(data, i, j) {
		let temp = data[i];
		data[i] = data[j];
		data[j] = temp;

		addSwapCount();
	}
	function getSwapCount() {
		return g_sort.selection.swap_count;
	}
	function addSwapCount() {
		g_sort.selection.swap_count++;
	}

	function addLoopCount() {
		g_sort.selection.loop_count++;
	}
}

/*
* Insertion Sort 삽입 정렬
*/
function Insertion_Sort(dataSet) {
	const size = dataSet.length;
	let remember;
	for (let i = 1; i < size; i++) {
		remember = dataSet[i];//2번째 값부터 체크.

		let j = 0;
		for (j = i - 1; j >= 0; j--) {
			//remember 값보다 크면 한칸씩 이동.
			if (dataSet[j] > remember) {
				dataSet[j + 1] = dataSet[j];
			} else {
				//remember 값과 같거나 작은것이 발생하면 중지.
				break;
			}
			addLoopCount();
		}
		dataSet[j + 1] = remember;
		addSwapCount();
		showData(getSwapCount(), dataSet);
	}

	function swap(data, i, j) {
		let temp = data[i];
		data[i] = data[j];
		data[j] = temp;

		addSwapCount();
	}
	function getSwapCount() {
		return g_sort.insertion.swap_count;
	}
	function addSwapCount() {
		g_sort.insertion.swap_count++;
	}

	function addLoopCount() {
		g_sort.insertion.loop_count++;
	}
}

/*
* Quick Sort 퀵 정렬
* 어... 이거 swap 횟수를 어떻게 세야하나...?
*/
function Quick_Sort(dataSet) {
	const size = dataSet.length;
	quick_unit(dataSet, 0, size);

	function quick_unit(data, left, right) {
		if (data.length <= 1) {
			return data;
		}
		let lte = []; //less than
		let gte = []; //greater than
		let pivot = data[parseInt(data.length / 2)];
		// gte 와 lte 를 나누는 과정.
		for (let i = data.length - 1; i >= 0; i--) {
			if (data[i] > pivot) {
				gte.push(data[i]);
			} else if (data[i] < pivot) {
				lte.push(data[i]);
			}
			addLoopCount();
			addPushCount();
		}
		showData("push-"+getPushCount(), data);

		return Array.prototype.concat(quick_unit(lte), pivot, quick_unit(gte));
	}

	function getPushCount() {
		return g_sort.quick.swap_count;
	}
	function addPushCount() {
		g_sort.quick.swap_count++;
	}

	function addLoopCount() {
		g_sort.quick.loop_count++;
	}
}

document.addEventListener("DOMContentLoaded",() => {
	append_result("<h2>원본</h2>");
	showData("원본", g_data);
    append_result("<br>");

    call_bubble_sort();
    call_selection_sort();
    call_insertion_sort();
    call_quick_sort();
    console.log(JSON.stringify(g_sort));
});

function showData(index, data) {
	append_result(`[${index}] ${data.join(", ")}<br>`);
}

/**
* 결과에 html 추가
*/
function append_result(html) {
	//$("#results").append(html);
	let d = document.querySelector("#results");
	d.insertAdjacentHTML('beforeend', html);
}

function call_bubble_sort() {
	let selected_sort = g_sort.bubble;
	append_result("<h2>버블 정렬</h2>");
	Bubble_Sort(Object.create(g_data),()=>{g_sort.bubble.swap_count++},()=>{g_sort.bubble.loop_count++});
	append_result(`최종 결과 : 루프 횟수 (${selected_sort.loop_count}), 치환 횟수 (${selected_sort.swap_count}) <br><br>`);
}

function call_insertion_sort() {
	let selected_sort = g_sort.insertion;
	append_result("<h2>삽입 정렬</h2>");
	Insertion_Sort(Object.create(g_data));
	append_result(`최종 결과 : 루프 횟수 (${selected_sort.loop_count}), 치환 횟수 (${selected_sort.swap_count}) <br><br>`);
}

function call_selection_sort() {
	let selected_sort = g_sort.selection;
	append_result("<h2>선택 정렬</h2>");
	Selection_Sort(Object.create(g_data));
	append_result(`최종 결과 : 루프 횟수 (${selected_sort.loop_count}), 치환 횟수 (${selected_sort.swap_count}) <br><br>`);
}

function call_quick_sort() {
	let selected_sort = g_sort.quick;
	append_result("<h2>퀵 정렬</h2>");
	Quick_Sort(Object.create(g_data));
	append_result(`최종 결과 : 루프 횟수 (${selected_sort.loop_count}), 치환 횟수 (${selected_sort.swap_count}) <br><br>`);
}

</script>
</head>

<body>
	<div class="container">
		<h1>Sorting algorithm</h1>
		<div class="card">
			<div class="card-body" id="results">
			</div>
		</div>
	</div>
</body>

</html>